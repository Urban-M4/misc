import os
from pathlib import Path

import xarray as xr
import f90nml

configfile: workflow.source_path("config.yaml")
workdir: config["working_directory"]
envvars: "NETCDF"

rule ALL_EXPERIMENTS:
    input: expand("{experiment}/finished.clean", experiment=config["experiments"].keys())

rule UP_TO_REAL:
    input: expand("{experiment}/finished.real", experiment=config["experiments"].keys())

rule CREATE_WORKDIR:
    input:
        wrf_job = workflow.source_path("wrf.job")
    output:
        "{experiment}/GEOGRID.TBL",
    params:
        geogrid_table = lambda wildcards: workflow.source_path(config['experiments'][wildcards.experiment]['geogrid_table']),
    shell:
        """
        mkdir -p {wildcards.experiment}
        cd {wildcards.experiment}
        cp {input.wrf_job} .
        cp {params.geogrid_table} GEOGRID.TBL
        """

rule UPDATE_NAMELISTS:
    input:
        namelist_wps = workflow.source_path("namelist.wps"),
        namelist_input = workflow.source_path("namelist.input"),
    output:
        "{experiment}/namelist.wps",
        "{experiment}/namelist.input"
    run:
        geog_data_res = config['experiments'][wildcards.experiment]['geog_data_res']
        geog_data_path = config['experiments'][wildcards.experiment]['geog_data_path']
        num_land_cat = config['experiments'][wildcards.experiment]['num_land_cat']
        use_wudapt_lcz = config['experiments'][wildcards.experiment]["use_wudapt_lcz"]

        # Read source namelist.wps with f90nml, make some changes, and save in work dir
        wps_path = Path(wildcards.experiment, "namelist.wps")
        nml = f90nml.read(input.namelist_wps)
        nml["geogrid"]["geog_data_path"] = geog_data_path
        nml["geogrid"]["geog_data_res"] = geog_data_res
        nml.write(wps_path)

        # Read source namelist.input, make some changes, and save in work dir
        input_path = Path(wildcards.experiment, "namelist.input")
        nml_input = f90nml.read(input.namelist_input)
        nml_input["physics"]["num_land_cat"] = num_land_cat
        nml_input["physics"]["use_wudapt_lcz"] = 1 if use_wudapt_lcz else 0
        nml_input.write(input_path)


rule GEOGRID:
    input:
        "{experiment}/namelist.wps",
        geogrid = "{experiment}/GEOGRID.TBL"
    output:
        "{experiment}/finished.geogrid"
    shell:
        """
        cd {wildcards.experiment}
        {config[wps_home]}/geogrid.exe

        # Scan logfile for errors and raise if necessary (geogrid can fail silently with 0 exit status)
        grep "ERROR" geogrid.log && echo "Aborting: ERROR in geogrid.log." && exit 1

        touch finished.geogrid
        """


rule UNGRIB:
    input:
        "{experiment}/namelist.wps"
    output:
        "{experiment}/finished.ungrib"
    shell:
        """
        cd {wildcards.experiment}

        # Remove old output if present (ungrib doesn't like to overwrite stuff)
        rm -f FILE*

        # Link vtable
        cp {config[wps_home]}/ungrib/Variable_Tables/Vtable.ECMWF Vtable

        # Link gribfiles
        {config[wps_home]}/link_grib.csh {config[data_home]}/real-time/july2019/*

        # Run ungrib
        {config[wps_home]}/ungrib.exe

        # Scan logfile for errors and raise if necessary (ungrib can fail silently with 0 exit status)
        grep "ERROR" ungrib.log && echo "Aborting: ERROR in ungrib.log." && exit 1

        # Report ready
        touch finished.ungrib
         """

rule ADD_42:
    input: "{experiment}/finished.geogrid"
    output: "{experiment}/finished.add42"
    run:
        for domain in ["d01", "d02", "d03", "d04"]:
            filepath = Path(wildcards.experiment) / f"geo_em.{domain}.nc"
            ds = xr.open_dataset(filepath)
            ds['HITCHHIKER'] = xr.ones_like(ds['LU_INDEX']) * 42
            ds['HITCHHIKER'].attrs = ds['LU_INDEX'].attrs
            ds.close()
            ds.to_netcdf(filepath, mode='a')

        Path(output[0]).touch()

rule METGRID:
    input:
        "{experiment}/namelist.wps",
        "{experiment}/finished.ungrib",
        "{experiment}/finished.geogrid",
        "{experiment}/finished.add42",
    output: "{experiment}/finished.metgrid"
    shell:
        """
        cd {wildcards.experiment}

        cp {config[wps_home]}/metgrid/METGRID.TBL.ARW METGRID.TBL
        {config[wps_home]}/metgrid.exe

        # Scan logfile for errors and raise if necessary (metgrid can fail silently with 0 exit status)
        grep "ERROR" metgrid.log && echo "Aborting: ERROR in metgrid.log. " && exit 1

        touch finished.metgrid
        """

rule REAL:
    input:
        "{experiment}/namelist.input",
        "{experiment}/finished.metgrid"
    output:
        "{experiment}/finished.real"
    shell:
        """
        cd {wildcards.experiment}
        {config[wrf_home]}/run/real.exe
        touch finished.real
        """

rule WRF:
    input:
        "{experiment}/namelist.input",
        "{experiment}/finished.real"
    output:
        "{experiment}/finished.wrf"
    shell:
        """
        cd {wildcards.experiment}

        # TODO link instead of cp and unlink after finishing?
        cp -f {config[wrf_home]}/run/CAMtr_volume_mixing_ratio.RCP8.5 CAMtr_volume_mixing_ratio
        cp -f {config[wrf_home]}/run/ozone* .
        cp -f {config[wrf_home]}/run/RRTMG* .
        cp -f {config[wrf_home]}/run/*.TBL .

        # Submit wrf job to SLURM and wait for it to finish
        sbatch --wait wrf.job {config[wrf_home]}/run/wrf.exe

        # Report status
        touch finished.wrf
        """

rule REORGANIZE_OUTPUT:
    input:
        "{experiment}/finished.wrf"
    output:
        "{experiment}/finished.clean"
    shell:
        """
        cd {wildcards.experiment}

        mkdir -p output/geogrid
        mkdir -p output/ungrib
        mkdir -p output/metgrid
        mkdir -p output/real
        mkdir -p output/wrf

        mv geo_em* output/geogrid
        mv GRIBFILE.* output/ungrib
        mv FILE* output/ungrib
        mv met_em* output/metgrid
        mv wrfbdy* wrfinput* output/real
        mv wrfout* output/wrf

        # TODO: copy log files to separate folder?
        # Especially since real.exe logs are overwritten by wrf.exe (rsl.error.0000 and rsl.out.0000)

        touch finished.clean
        """


