configfile: "./config.yaml"
workdir: "/home/pkalverla1/Urban-M4/experiments/snakemake"
envvars:
    "NETCDF",

# All rules except WRF should be executed locally
localrules: REORGANIZE_OUTPUT, CREATE_WORKDIR, GEOGRID, W2W, UNGRIB, METGRID, REAL

rule DEFAULT:
    # First rule is executed by default. It requires output of the last rule to be present.
    input: "finished.clean"

rule CREATE_WORKDIR:
    input: workflow.source_path("namelist.wps"), workflow.source_path("GEOGRID.TBL"), workflow.source_path("namelist.input")
    output: "namelist.wps", "GEOGRID.TBL", "namelist.input"
    shell: "cp {input} ."

rule GEOGRID:
    input: "namelist.wps", "GEOGRID.TBL"
    output: "finished.geogrid"
    shell:
        f"""
        {config['WPS_HOME']}/geogrid.exe
        touch finished.geogrid
        """

rule W2W:
    input: "finished.geogrid"
    output: "finished.w2w"
    shell:
        f"""
        w2w . /projects/0/prjs0914/wrf-data/default/lcz/amsterdam_lcz4_clean.tif ./geo_em.d04.nc v4.5.2
        mv geo_em.d01_61.nc geo_em.d01.nc
        mv geo_em.d02_61.nc geo_em.d02.nc
        mv geo_em.d03_61.nc geo_em.d03.nc
        mv geo_em.d04_LCZ_params.nc geo_em.d04.nc
        touch finished.w2w
        """

rule UNGRIB:
    input: "namelist.wps"
    output: "finished.ungrib"
    shell: f"""

        # Remove old output if present (ungrib doesn't like to overwrite stuff)
        rm -f FILE*

        # Link vtable
        cp {config['WPS_HOME']}/ungrib/Variable_Tables/Vtable.GFS Vtable

        # Link gribfiles
        {config['WPS_HOME']}/link_grib.csh {config['DATA_HOME']}/real-time/gfs-data/*

        # Run ungrib
        {config['WPS_HOME']}/ungrib.exe

        # Scan logfile for errors and raise if necessary (ungrib can fail silently with 0 exit status)
        grep "ERROR" ungrib.log && echo "Aborting: ERROR in ungrib.log." && exit 1

        # Report ready
        touch finished.ungrib
    """

rule METGRID:
    input:
        "namelist.wps",
        "finished.ungrib",
        "finished.geogrid",
        "finished.w2w",  # TODO make conditional
    output: "finished.metgrid"
    shell:
        f"""
        mkdir -p output/metgrid
        cp {config['WPS_HOME']}/metgrid/METGRID.TBL.ARW METGRID.TBL
        {config['WPS_HOME']}/metgrid.exe

        # Scan logfile for errors and raise if necessary (metgrid can fail silently with 0 exit status)
        grep "ERROR" metgrid.log && echo "Aborting: ERROR in metgrid.log. " && exit 1

        touch finished.metgrid
        """

rule REAL:
    input: "namelist.input", "finished.metgrid"
    output: "finished.real"
    shell:
        f"""
        {config['WRF_HOME']}/run/real.exe
        touch finished.real
        """

rule WRF:
    input: "namelist.input", "finished.real"
    output: "finished.wrf"
    resources:
        slurm_partition="thin", # Request thin partition
        runtime=60,             # In minutes(!). Up to one hour goes to fast queue
        nodes=1,                # Number of nodes (one thin node has 128 cpu cores)
        tasks=64,               # Number of tasks per node / number of patches in the domain - parallelized with MPI / DMPAR / multiprocessing
        cpus_per_task=2,        # Number of CPU cores per task / number of tiles within each patch - parallelized with OpenMP / SMPAR / multithreading
        mpi="mpiexec",
    shell:
        """
        export OMP_NUM_THREADS={resources.tasks}

        # TODO link and unlink after finishing?
        cp {config[WRF_HOME]}/run/CAMtr_volume_mixing_ratio.RCP8.5 CAMtr_volume_mixing_ratio
        cp {config[WRF_HOME]}/run/ozone* .
        cp {config[WRF_HOME]}/run/RRTMG* .
        cp {config[WRF_HOME]}/run/*.TBL .

        {resources.mpi} {config[WRF_HOME]}/run/wrf.exe

        touch finished.wrf
        """

rule REORGANIZE_OUTPUT:
    input: "finished.wrf"
    output: "finished.clean"
    shell:
        f"""
        mkdir -p output/geogrid
        mkdir -p output/ungrib
        mkdir -p output/metgrid
        mkdir -p output/real
        mkdir -p output/wrf

        mv geo_em* output/geogrid
        mv GRIBFILE.* output/ungrib
        mv FILE* output/ungrib
        mv met_em* output/metgrid
        mv wrfbdy* wrfinput* output/real
        mv wrfout* output/wrf

        touch finished.clean
        """


